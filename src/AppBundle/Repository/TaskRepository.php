<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Task;
use Doctrine\ORM\EntityNotFoundException;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Returns all tasks.
     *
     * @param boolean $retrieveDeleted Whether to retrieve deleted tasks.
     *
     * @return Task[]
     */
    public function getAll($retrieveDeleted = false)
    {
        return $this->findBy(['deleted' => $retrieveDeleted]);
    }

    /**
     * Deletes a task by setting the 'deleted' flag.
     *
     * @param integer $taskId The id of the task.
     *
     * @throws EntityNotFoundException
     */
    public function delete($taskId)
    {
        /** @var Task $task */
        $task = $this->find($taskId);

        if (!$task) {
            throw new EntityNotFoundException();
        }

        $task->setDeleted(true);

        $this->_em->persist($task);
        $this->_em->flush($task);
    }

    /**
     * Marks the task as completed/todo.
     *
     * @param integer $taskId   The id of the task.
     * @param boolean $complete Whether to mark as complete or as todo.
     *
     * @throws EntityNotFoundException
     */
    public function complete($taskId, $complete)
    {
        /** @var Task $task */
        $task = $this->find($taskId);

        if (!$task) {
            throw new EntityNotFoundException();
        }

        $task->setCompleted($complete);

        $this->_em->persist($task);
        $this->_em->flush($task);
    }

    /**
     * Adds a new task.
     *
     * @param string $taskString The new task.
     */
    public function add($taskString)
    {
        $task = new Task();

        $task->setTask($taskString);

        $this->_em->persist($task);
        $this->_em->flush($task);
    }

    /**
     * Edits an existing task.
     *
     * @param integer $taskId     The id of the task.
     * @param string  $taskString The new task.
     *
     * @throws EntityNotFoundException
     */
    public function edit($taskId, $taskString)
    {
        /** @var Task $task */
        $task = $this->find($taskId);

        if (!$task) {
            throw new EntityNotFoundException();
        }

        $task->setTask($taskString);

        $this->_em->persist($task);
        $this->_em->flush($task);
    }
}
